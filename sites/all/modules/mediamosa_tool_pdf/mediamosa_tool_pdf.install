<?php
/**
 * @file
 * PDF tool installer.
 */

/**
 * Implements hook_install().
 */
function mediamosa_tool_pdf_install() {
  // Tool params.
  $t = get_t();
  $default_params = array(
    array(
      'pdf', 'mediafiles', 'mediafiles', NULL, NULL, NULL, '', 'FALSE', $t('Array of mediafiles ids to add to the pdf.'), 'SELECT'),
    array(
      'pdf', 'pdffilename', 'pdffilename', NULL, NULL, NULL, '', 'FALSE', $t('Name of the pdffile.'), 'SELECT'),
    array(
      'pdf', 'replace', 'replace', NULL, NULL, NULL, '', 'FALSE', $t('Remove any other existing generated pdf files by this tool in the asset.'), 'SELECT'),
    array(
      'pdf', 'max_width', 'max_width', NULL, NULL, NULL, '', 'FALSE', $t('Max width of PDF.'), 'SELECT'),
  );

  // Insert default mappings as nodes.
  foreach ($default_params as $default_param) {
    $node = mediamosa_node::create_basic_node(mediamosa_node::MEDIAMOSA_NODE_TYPE_TOOL_PARAMS, $default_param[1]);

    $node->{mediamosa_tool_params_db::TOOL} = $default_param[0];
    $node->{mediamosa_tool_params_db::NICE_PARAMETER} = $default_param[1];
    $node->{mediamosa_tool_params_db::TOOL_PARAMETER} = $default_param[2];
    $node->{mediamosa_tool_params_db::MIN_VALUE} = $default_param[3];
    $node->{mediamosa_tool_params_db::MAX_VALUE} = $default_param[4];
    $node->{mediamosa_tool_params_db::ALLOWED_VALUE} = $default_param[5];
    $node->{mediamosa_tool_params_db::DEFAULT_VALUE} = $default_param[6];
    $node->{mediamosa_tool_params_db::REQUIRED} = $default_param[7];
    $node->{mediamosa_tool_params_db::DESCRIPTION} = $default_param[8];
    $node->{mediamosa_tool_params_db::TYPE_PARAMETER} = $default_param[9];

    $node = node_save($node);
  }

  // Transcode profile.

  $default_profiles = array(
    array(
      'PDF',
      'FALSE',
      'pdf',
      'pdf',
      array(),
    ),
  );

  foreach ($default_profiles as $default_profile) {
    $node = mediamosa_node::create_basic_node(mediamosa_node::MEDIAMOSA_NODE_TYPE_TRANSCODE_PROFILE, $default_profile[0]);

    $node->{mediamosa_transcode_profile_db::APP_ID} = 0;
    $node->{mediamosa_transcode_profile_db::VERSION} = 0;
    $node->{mediamosa_transcode_profile_db::PROFILE} = $default_profile[0];
    $node->{mediamosa_transcode_profile_db::IS_DEFAULT_PROFILE} = $default_profile[1];
    $node->{mediamosa_transcode_profile_db::TOOL} = $default_profile[2];
    $node->{mediamosa_transcode_profile_db::FILE_EXTENSION} = $default_profile[3];
    $node->{mediamosa_transcode_profile_db::COMMAND} = mediamosa_transcode_profile::arrayToCommand($default_profile[4]);
    $node->{mediamosa_transcode_profile_db::MACHINE_NAME} = mediamosa_db::generate_machine_name($default_profile[0], 'mediamosa_transcode_profile');

    $node = node_save($node);
  }

  // Tool mapping.
  $dc = mediamosa_asset_metadata_property_group::property_group_row_get_with_name('dublin_core');
  $qdc = mediamosa_asset_metadata_property_group::property_group_row_get_with_name('qualified_dublin_core');
  $mapping_array = array(
    array('title', 'title', $dc[mediamosa_asset_metadata_property_group_db::ID]),
    array(
      'subject', 'subject', $dc[mediamosa_asset_metadata_property_group_db::ID],
    ),
    array('keywords', '', 0),
    array('author', '', 0),
    array(
      'creator', 'creator', $dc[mediamosa_asset_metadata_property_group_db::ID],
    ),
    array(
      'producer', 'publisher', $dc[mediamosa_asset_metadata_property_group_db::ID],
    ),
    array(
      'creationdate', 'created', $qdc[mediamosa_asset_metadata_property_group_db::ID],
    ),
    array(
      'creation date', 'created', $qdc[mediamosa_asset_metadata_property_group_db::ID],
    ),
    array('moddate', '', 0),
    array('modificationdate', '', 0),
    array('modification date', '', 0),
    array('tagged', '', 0),
    array('pages', '', 0),
    array('encrypted', '', 0),
    array(
      'print and copy permissions', 'rights', $dc[mediamosa_asset_metadata_property_group_db::ID],
    ),
    array('page size', '', 0),
    array('file size', '', 0),
    array('optimized', '', 0),
    array('linearized', '', 0),
    array('pdf version', '', 0),
    array('metadata', '', 0),
  );

  // Insert default mappings as nodes.
  foreach ($mapping_array as $mapping) {
    if ($mapping[1] && $mapping[2] && is_numeric($mapping[2]) && $mapping[2] > 0) {
      $prop = mediamosa_asset_metadata_property::property_get_row_with_name($mapping[1], $mapping[2]);
      if ($prop) {
        $prop_id = $prop[mediamosa_asset_metadata_property_db::ID];

        $node = mediamosa_node::create_basic_node(mediamosa_node::MEDIAMOSA_NODE_TYPE_TOOL_MAPPING, $mapping[0]);

        $node->{mediamosa_tool_mapping_db::TOOL} = mediamosa_tool_pdf::NAME;
        $node->{mediamosa_tool_mapping_db::PARAMETER} = $mapping[0];
        $node->{mediamosa_tool_mapping_db::PROP_ID} = $prop_id;

        $node = node_save($node);
      }
    }
  }
}

/**
 * Implements hook_unstall().
 */
function mediamosa_tool_pdf_uninstall() {

  $query = new EntityFieldQuery();
  $entities = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type',
      array(
        mediamosa_node::MEDIAMOSA_NODE_TYPE_TRANSCODE_PROFILE,
        mediamosa_node::MEDIAMOSA_NODE_TYPE_TOOL_MAPPING,
        mediamosa_node::MEDIAMOSA_NODE_TYPE_TOOL_PARAMS,
      ), 'IN')
    ->execute();
  $nodes = node_load_multiple(array_keys($entities['node']));

  // Can't add tool=... to FieldQuery, so do it here.
  $nodes_to_delete = array();
  foreach ($nodes as $node) {
    if ($node->tool == 'pdf') {
      $nodes_to_delete[] = $node->nid;
    }
  }
  node_delete_multiple($nodes_to_delete);
}

/**
 * Added replace parameter to pdf tool.
 */
function mediamosa_tool_pdf_update_7000() {

  $params = array(
    array(
      'pdf', 'replace', 'replace', NULL, NULL, NULL, '', 'FALSE', t('Remove any other existing generated pdf files by this tool in the asset.'), 'SELECT'),
  );

  // Insert default mappings as nodes.
  foreach ($params as $param) {
    $node = mediamosa_node::create_basic_node(mediamosa_node::MEDIAMOSA_NODE_TYPE_TOOL_PARAMS, $param[1]);

    $node->{mediamosa_tool_params_db::TOOL} = $param[0];
    $node->{mediamosa_tool_params_db::NICE_PARAMETER} = $param[1];
    $node->{mediamosa_tool_params_db::TOOL_PARAMETER} = $param[2];
    $node->{mediamosa_tool_params_db::MIN_VALUE} = $param[3];
    $node->{mediamosa_tool_params_db::MAX_VALUE} = $param[4];
    $node->{mediamosa_tool_params_db::ALLOWED_VALUE} = $param[5];
    $node->{mediamosa_tool_params_db::DEFAULT_VALUE} = $param[6];
    $node->{mediamosa_tool_params_db::REQUIRED} = $param[7];
    $node->{mediamosa_tool_params_db::DESCRIPTION} = $param[8];
    $node->{mediamosa_tool_params_db::TYPE_PARAMETER} = $param[9];

    $node = node_save($node);
  }
}

/**
 * Added machine_name to pdf tool.
 */
function mediamosa_tool_pdf_update_7001() {

  $result = mediamosa_db::db_query('SELECT nid FROM {mediamosa_transcode_profile} where tool=:tool', array(':tool' => mediamosa_tool_pdf::NAME));
  foreach ($result as $record) {
    $node = node_load($record['nid']);
    if (isset($node->machine_name) && $node->machine_name !== '' && $node->machine_name !== NULL) {
      continue;
    }
    $machine_name = empty($node->title) ? (empty($node->profile) ? 'mediamosa_transcode_profile' : $node->profile) : $node->title;
    $node->machine_name = mediamosa_db::generate_machine_name($machine_name, 'mediamosa_transcode_profile');
    node_save($node);
  }
}
