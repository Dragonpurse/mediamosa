<?php
 /**
  * @file
  * CQL sort on 'mediafile_duration' file.
  */
class MediaMosaAssetCQLMediafileDurationTestCaseEga extends MediaMosaTestCaseEga {

  // ------------------------------------------------------------------ Members.

  // ------------------------------------------------------------------ Functions.
  public static function getInfo() {
    return array(
      'name' => 'CQL - Tests for mediafile_duration, mediafile_mime_type.',
      'description' => 'Testing CQL sort on "mediafile_duration" related functions and rest calls. Also tests for normalized mimetype.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_ASSET_CQL,
    );
  }

  // ------------------------------------------------------------------ Tests.
  public function testCQLSortMediafileDuration() {

    // Limit.
    $limit = 10;

    // Upload files.
    $response_1 = $this->uploadTestFile();
    $response_2 = $this->uploadTestFile();
    $response_3 = $this->uploadTestFile();

    // Update mediafile_duration.
    $num_updated = db_update(mediamosa_asset_db::TABLE_NAME)
      ->fields(array(
        mediamosa_asset_db::MEDIAFILE_DURATION => '00:00:12.38',
      ))
      ->condition(mediamosa_asset_db::ID, $response_1['asset_id'])
      ->execute();
    $num_updated = db_update(mediamosa_asset_db::TABLE_NAME)
      ->fields(array(
        mediamosa_asset_db::MEDIAFILE_DURATION => '00:00:29.92',
      ))
      ->condition(mediamosa_asset_db::ID, $response_3['asset_id'])
      ->execute();

    // Search with CQL.

    // Search assets.
    $a_parameters = array(
      mediamosa_rest_call_asset_search::CQL => strtr('(owner_id=="^@owner_id^")', array('@owner_id' => addslashes(self::SIMPLETEST_USER_ID))),
    );
    $a_assets = $this->searchAsset($limit, $a_parameters);

    // Check result.
    $this->assertTrue(
      count($a_assets['items']['item']) == 3,
      t("There are all the assets (3 = @get)", array('@get' => count($a_assets['items']['item'])))
    );

    // Search with CQL, sortby title.

    // Search assets.
    $a_parameters = array(
      mediamosa_rest_call_asset_search::CQL => strtr('(owner_id=="^@owner_id^") sortby title', array('@owner_id' => addslashes(self::SIMPLETEST_USER_ID))),
    );
    $a_assets = $this->searchAsset($limit, $a_parameters);

    // Check result.
    $this->assertTrue(
      count($a_assets['items']['item']) == 3,
      t("There are all the assets (3 = @get)", array('@get' => count($a_assets['items']['item'])))
    );

    // Search with CQL, sortby mediafile_duration.

    // Search assets.
    $a_parameters = array(
      mediamosa_rest_call_asset_search::CQL => strtr('(owner_id=="^@owner_id^") sortby mediafile_duration', array('@owner_id' => addslashes(self::SIMPLETEST_USER_ID))),
    );
    $a_assets = $this->searchAsset($limit, $a_parameters);

    // Check result.
    $this->assertTrue(
      count($a_assets['items']['item']) == 3,
      t("There are all the assets (3 = @get)", array('@get' => count($a_assets['items']['item'])))
    );
  }

  public function testCQLMimeType() {
    // Upload files.
    $response_1 = $this->uploadTestFile(array('filename' => $this->getTestVideo_ogg()));
    $response_2 = $this->uploadTestFile(array('filename' => $this->getTestVideo_wmv()));
    $response_3 = $this->uploadTestFile(array('filename' => $this->getTestAudio_Mp3()));
    $response_4 = $this->uploadTestFile(array('filename' => $this->getTestVideo_ogg()));

    $asset_id_1 = $response_1['asset_id'];
    $asset_id_2 = $response_2['asset_id'];
    $asset_id_3 = $response_3['asset_id'];
    $asset_id_4 = $response_4['asset_id'];

    $asset_1 = $this->getAsset($asset_id_1);
    $this->var_export($asset_1);
    $this->assertTrue(in_array($asset_1['mediafile_mime_type'], array('application/ogg', 'video/ogg')), 'Mimetype is ' . $asset_1['mediafile_mime_type']);

    $asset_2 = $this->getAsset($asset_id_2);
    $this->var_export($asset_2);
    $this->assertTrue(in_array($asset_2['mediafile_mime_type'], array('video/x-ms-asf')), 'Mimetype is ' . $asset_2['mediafile_mime_type']);

    $asset_3 = $this->getAsset($asset_id_3);
    $this->var_export($asset_3);
    $this->assertTrue(in_array($asset_3['mediafile_mime_type'], array('audio/mpeg')), 'Mimetype is ' . $asset_3['mediafile_mime_type']);

    $asset_4 = $this->getAsset($asset_id_4);
    $this->var_export($asset_4);
    $this->assertTrue(in_array($asset_4['mediafile_mime_type'], array('application/ogg', 'video/ogg')), 'Mimetype is ' . $asset_4['mediafile_mime_type']);

    // Search for audio.
    $this->cql_do_search_test_assets_1('mediafile_mime_type = "^audio/"', array($asset_id_3 => TRUE));

    // Search for ogg.
    $this->cql_do_search_test_assets_1('mediafile_mime_type = "^application/ogg^" OR mediafile_mime_type = "^video/ogg^"', array($asset_id_1 => TRUE, $asset_id_4 => TRUE));

    // Search for wmf.
    $this->cql_do_search_test_assets_1('mediafile_mime_type = "^video/x-ms-asf^"', array($asset_id_2 => TRUE));

    // Search for wmf using the normal mime_type.
    $this->cql_do_search_test_assets_1('mime_type = "^video/x-ms-asf^"', array($asset_id_2 => TRUE));
  }
}
