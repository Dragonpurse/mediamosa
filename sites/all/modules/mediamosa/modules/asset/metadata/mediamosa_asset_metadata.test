<?php
/**
  * @file
  * Unittests for metadata property.
  */

class MediaMosaAssetMetadataTestCaseEga extends MediaMosaTestCaseEga {

  // ---------------------------------------------------------------- Functions.
  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Asset - Metadata tests',
      'description' => 'Testing asset metadata related functions and rest calls.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_ASSET,
    );
  }

  // -------------------------------------------------------------------- Tests.
  /**
   * Prevent double metadata when sending multiple.
   */
  public function testMetadataPropery() {
    // Create the asset.
    $asset_id = $this->createAsset();

    // By default new assets are published.
    $asset = $this->getAsset($asset_id);
    $this->var_export($asset);

    // Default value is true for published.
    $this->assert($asset['asset']['published'] === 'TRUE', 'Is published');

    $this->createAssetMetadata($asset_id, array('published' => 'FALSE'));
    $asset = $this->getAsset($asset_id);
    $this->var_export($asset);
    $this->assert($asset['asset']['published'] === 'FALSE', 'Is unpublished');

    $this->createAssetMetadata($asset_id, array('published' => 'TRUE'));
    $asset = $this->getAsset($asset_id);
    $this->var_export($asset);
    $this->assert($asset['asset']['published'] === 'TRUE', 'Is published');

    $this->createAssetMetadata($asset_id, array('trashcan' => 'FALSE', 'published' => 'TRUE', 'title' => 'foo'));
    $asset = $this->getAsset($asset_id);
    $this->var_export($asset);
    $this->assert($asset['asset']['published'] === 'TRUE', 'Is published');

    $this->createAssetMetadata($asset_id, array('title' => 'foo2'));
    $asset = $this->getAsset($asset_id);
    $this->var_export($asset);
    $this->assert($asset['asset']['published'] === 'TRUE', 'Is published');

    $this->createAssetMetadata($asset_id, array('title' => 'foo3', 'action' => 'update'));
    $asset = $this->getAsset($asset_id);
    $this->var_export($asset);
    $this->assert($asset['asset']['published'] === 'TRUE', 'Is published');

    $this->updateAsset($asset_id, array('asset_type' => 'foo1'));

    $this->createAssetMetadata($asset_id, array('title' => 'foo4', 'action' => 'append'));
    $asset = $this->getAsset($asset_id);
    $this->var_export($asset);
    $this->assert($asset['asset']['published'] === 'TRUE', 'Is published');

    $this->updateAsset($asset_id, array('asset_type' => 'foo2'));

    $this->createAssetMetadata($asset_id, array('published' => 'TRUE', 'action' => 'update'));
    $asset = $this->getAsset($asset_id);
    $this->var_export($asset);
    $this->assert($asset['asset']['published'] === 'TRUE', 'Is published');

    $this->createAssetMetadata($asset_id, array('published' => 'FALSE', 'action' => 'append'), array(mediamosa_error::ERRORCODE_METADATA_MAX_OCCURRENCE_FAILURE));
    $asset = $this->getAsset($asset_id);
    $this->var_export($asset);
    $this->assert($asset['asset']['published'] === 'TRUE', 'Is published');

    $this->createAssetMetadata($asset_id, array('published' => array('TRUE', 'FALSE')), array(mediamosa_error::ERRORCODE_METADATA_MAX_OCCURRENCE_FAILURE));
    $asset = $this->getAsset($asset_id);
    $this->var_export($asset);
    $this->assert($asset['asset']['published'] === 'TRUE', 'Is published');

    $this->createAssetMetadata($asset_id, array('published' => array('TRUE', 'FALSE'), 'action' => 'update'), array(mediamosa_error::ERRORCODE_METADATA_MAX_OCCURRENCE_FAILURE));
    $asset = $this->getAsset($asset_id);
    $this->var_export($asset);
    $this->assert($asset['asset']['published'] === 'TRUE', 'Is published');

    $this->createAssetMetadata($asset_id, array('published' => array('TRUE', 'FALSE'), 'action' => 'append'), array(mediamosa_error::ERRORCODE_METADATA_MAX_OCCURRENCE_FAILURE));
    $asset = $this->getAsset($asset_id);
    $this->var_export($asset);
    $this->assert($asset['asset']['published'] === 'TRUE', 'Is published');

    // Make published metadata property min 2 and max 4 so we can test this.
    mediamosa_db::db_update(mediamosa_asset_metadata_property_db::TABLE_NAME)
      ->fields(array(
        mediamosa_asset_metadata_property_db::MIN_OCCURRENCES => 2,
        mediamosa_asset_metadata_property_db::MAX_OCCURRENCES => 3,
      ))
      ->condition(mediamosa_asset_metadata_property_db::NAME, 'published')
      ->execute();

    $this->createAssetMetadata($asset_id, array('published' => array('TRUE')), array(mediamosa_error::ERRORCODE_METADATA_MIN_OCCURRENCE_FAILURE));
    $asset = $this->getAsset($asset_id);
    $this->var_export($asset);
    $this->createAssetMetadata($asset_id, array('published' => array('TRUE', 'FALSE', 'TRUE', 'FALSE')), array(mediamosa_error::ERRORCODE_METADATA_MAX_OCCURRENCE_FAILURE));
    $asset = $this->getAsset($asset_id);
    $this->var_export($asset);
    $this->createAssetMetadata($asset_id, array('published' => array('TRUE', 'FALSE')));
    $asset = $this->getAsset($asset_id);
    $this->var_export($asset);
    $this->createAssetMetadata($asset_id, array('published' => array('TRUE', 'FALSE', 'TRUE')));
    $asset = $this->getAsset($asset_id);
    $this->var_export($asset);
  }
}
