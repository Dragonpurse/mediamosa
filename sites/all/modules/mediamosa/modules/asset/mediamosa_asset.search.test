<?php
/**
 * @file
 * Unittests for asset search empty assets.
 */

// Class 'MediaMosaAssetSearchEmptyTestCaseEga' has been moved in 3.6 RC3. Need
// this till 3.7. Running update.php will correct the problem too.
require_once 'mediamosa_asset.search.empty.test';

class MediaMosaAssetSearchTestCaseEga extends MediaMosaTestCaseEgaJob {

  // ---------------------------------------------------------------- Functions.
  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Asset - Searching basic',
      'description' => 'Basic search tests with CQL and metadata custom tags.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_ASSET,
    );
  }

  // -------------------------------------------------------------------- Tests.
  /**
   * Testing 'having' issue with CQL in 3.6.
   */
  public function testAssetSearchCQL() {

    $definition = 'simpletest_access_policy';
    $type = 'char';
    $response = $this->createAssetMetadataDefinition($definition, $type);
    $this->var_export($response);
    $this->assertTrue(
      (string) $response->items->item[0]->prop_name == $definition,
      t('Sent and get property name is the same (@sent = @get).', array('@sent' => $definition, '@get' => (string) $response->items->item[0]->prop_name))
    );
    // Type.
    $type = mediamosa_unicode::strtoupper($type);
    $this->assertTrue(
      (string) $response->items->item[0]->type == $type,
      t('Sent and get property type is the same (@sent = @get).', array('@sent' => $type, '@get' => (string) $response->items->item[0]->type))
    );

    $definition = 'simpletest_status';
    $type = 'char';
    $response = $this->createAssetMetadataDefinition($definition, $type);
    $this->var_export($response);

    $this->assertTrue(
      (string) $response->items->item[0]->prop_name == $definition,
      t('Sent and get property name is the same (@sent = @get).', array('@sent' => $definition, '@get' => (string) $response->items->item[0]->prop_name))
    );
    // Type.
    $type = mediamosa_unicode::strtoupper($type);
    $this->assertTrue(
      (string) $response->items->item[0]->type == $type,
      t('Sent and get property type is the same (@sent = @get).', array('@sent' => $type, '@get' => (string) $response->items->item[0]->type))
    );

    // Properties as int must not be allowed when searching with text.
    $definition = 'simpletest_access_policy_int';

    $type = 'int';
    $response = $this->createAssetMetadataDefinition($definition, $type);
    $this->var_export($response);
    $this->assertTrue(
      (string) $response->items->item[0]->prop_name == $definition,
      t('Sent and get property name is the same (@sent = @get).', array('@sent' => $definition, '@get' => (string) $response->items->item[0]->prop_name))
    );
    // Type.
    $type = mediamosa_unicode::strtoupper($type);
    $this->assertTrue(
      (string) $response->items->item[0]->type == $type,
      t('Sent and get property type is the same (@sent = @get).', array('@sent' => $type, '@get' => (string) $response->items->item[0]->type))
    );

    // ------------------------------------- Create asset and metadata property.
    $asset_id_2 = $this->createAsset();
    sleep(2);
    $asset_id_4 = $this->createAsset();
    sleep(2);
    $asset_id_3 = $this->createAsset();
    sleep(2);
    $asset_id_1 = $this->createAsset();

    // Create properties.
    $this->createAssetMetadata($asset_id_1,
      array(
        'simpletest_access_policy' => '1',
        'status' => 'streamable',
      )
    );
    // Create properties.
    $this->createAssetMetadata($asset_id_2,
      array(
        'simpletest_access_policy' => '2',
        'status' => 'streamable',
      )
    );
    // Create properties.
    $this->createAssetMetadata($asset_id_3,
      array(
        'simpletest_access_policy_int' => '1',
        'simpletest_access_policy' => 'w',
        'status' => 'vox',
      )
    );

    // Breaks on solr, but for other reason.
 //   $this->cql_do_search_test_assets_1('((simpletest_access_policy == "w" OR (owner_id == "something" AND simpletest_access_policy == "2")) OR ((acl_user == "^something^" OR acl_group == "^something^" OR acl_group == "^something^") AND simpletest_access_policy == "1")) AND (simpletest_status == "^streamable^" OR simpletest_status == "^vox^") sortBy videotimestamp/descending', array($asset_id_3 => TRUE));



// (
//   (
//     simpletest_access_policy == "w"
//     OR
//     (
//       owner_id == "something" AND simpletest_access_policy == "2"
//     )
//   )
//   OR
//   (
//     (
//       acl_user == "^something^" OR acl_group == "^something^" OR acl_group == "^something^"
//     )
//     AND
//     simpletest_access_policy == "1"
//   )
// )
// AND
// (
//   simpletest_status == "^streamable^" OR simpletest_status == "^vox^"
// )

// (
//   mediamosa_asset_metadata_simpletest_access_policy.val_char LIKE '%%w%%'
//   OR
//   (
//     a.owner_id LIKE '%%something%%' AND mediamosa_asset_metadata_simpletest_access_policy.val_char LIKE '%%2%%'
//   )
// )
// OR
// (
//   acl_u.acl_name = 'something' OR acl_ug.acl_name = 'something' OR acl_ug.acl_name = 'something'
// )
// AND
//   mediamosa_asset_metadata_simpletest_access_policy.val_char LIKE '%%1%%'
// AND
// (
//   mediamosa_asset_metadata_simpletest_status.val_char = 'streamable' OR mediamosa_asset_metadata_simpletest_status.val_char = 'vox'
// )
//
// (
//   (mediamosa_asset_metadata_simpletest_access_policy.val_char LIKE '%%w%%' OR (a.owner_id LIKE '%%something%%' AND mediamosa_asset_metadata_simpletest_access_policy.val_char LIKE '%%2%%'))
//   OR
//   (acl_u.acl_name = 'something' OR acl_ug.acl_name = 'something' OR acl_ug.acl_name = 'something')
//   AND
//   mediamosa_asset_metadata_simpletest_access_policy.val_char LIKE '%%1%%'
//   AND
//   (mediamosa_asset_metadata_simpletest_status.val_char = 'streamable' OR mediamosa_asset_metadata_simpletest_status.val_char = 'vox')
// )

//
//   //
// (
//   (app_10436_simpletest_access_policy_vc:"w" OR (*:* AND owner_id:"something" AND app_10436_simpletest_access_policy_vc:"2"))
//   OR
//   (mf_acl_user:something OR mf_acl_user_group:something OR mf_acl_user_group:something)
//   AND
//   app_10436_simpletest_access_policy_vc:"1"
//   AND
//   (app_10436_simpletest_status_vc_exact:streamable OR app_10436_simpletest_status_vc_exact:vox)
// )
  }
}
