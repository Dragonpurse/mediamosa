<?php
/**
 * @file
 * CQL test file.
 */

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice
 * Oriented Media Management and Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2012 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

class MediaMosaAssetCQLTestCaseEga extends MediaMosaTestCaseEga {

  // ------------------------------------------------------------------ Members.

  // ------------------------------------------------------------------ Functions.
  public static function getInfo() {
    return array(
      'name' => 'CQL - Asset search and properties',
      'description' => 'Testing asset CQL related functions and rest calls.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_ASSET_CQL,
    );
  }

  // ------------------------------------------------------------------ Tests.
  // Test unappropriate flag (16710).
  public function testCQL_UnAppropriate() {

    // Create asset.
    $asset_id = $this->createAsset();

    // Mediafile.
    $mediafile_id = $this->createMediafile($asset_id);

    // Create asset metadata.
    $this->createAssetMetadata($asset_id,
      array(
        'title' => 'aap noot mies',
      )
    );

    // We must be app admin to get them.
    $search_params = array(mediamosa_rest_call_asset_search::IS_APP_ADMIN => 'true');

    // May not find anything.
    $this->cql_do_search_test_assets_1('is_unappropriate == "TRUE"', array(), $search_params);

    // May not find anything.
    $this->cql_do_search_test_assets_1('is_unappropriate == "true"', array(), $search_params);

    // Must find it.
    $this->cql_do_search_test_assets_1('is_unappropriate == "FALSE"', array($asset_id => TRUE), $search_params);

    // Must find it.
    $this->cql_do_search_test_assets_1('is_unappropriate == "false"', array($asset_id => TRUE), $search_params);

    // Change is_unappropriate to TRUE.
    $parameters = array(
      mediamosa_rest_call_asset_update::IS_UNAPPROPRIATE => 'true',
      mediamosa_rest_call_asset_update::IS_APP_ADMIN => 'true',
    );

    // Change it.
    $this->updateAsset($asset_id, $parameters);

    // Get asset and check setting.
    $asset = $this->getAsset($asset_id);
    $this->assertTrue($asset[mediamosa_asset_db::IS_UNAPPROPRIATE] == mediamosa_asset_db::IS_UNAPPROPRIATE_TRUE);

    // Must find it.
    $this->cql_do_search_test_assets_1('is_unappropriate == "TRUE"', array($asset_id => TRUE), $search_params);

    // Must find it.
    $this->cql_do_search_test_assets_1('is_unappropriate == "true"', array($asset_id => TRUE), $search_params);

    // May not find anything.
    $this->cql_do_search_test_assets_1('is_unappropriate == "FALSE"', array(), $search_params);

    // May not find anything.
    $this->cql_do_search_test_assets_1('is_unappropriate == "false"', array(), $search_params);
  }

  // Test the URI. (#16711).
  public function testCQL_URI() {
    // Create asset.
    $asset_id_1 = $this->createAsset();
    $asset_id_2 = $this->createAsset();

    // Mediafile.
    $mediafile_id_1 = $this->createMediafile($asset_id_1);
    $mediafile_id_2 = $this->createMediafile($asset_id_2);

    // Create asset metadata.
    $this->createAssetMetadata($asset_id_1,
      array(
        'title' => 'aap noot mies',
      )
    );

    // Create asset metadata.
    $this->createAssetMetadata($asset_id_2,
      array(
        'title' => 'aap noot',
      )
    );

    // May not find anything.
    $this->cql_do_search_test_assets_1('uri <> NULL', array());

    // Update it.
    $this->updateMediafile($mediafile_id_1, array(mediamosa_rest_call_update_mediafile::URI => 'http://mediamosa.org/external_link'));

    // Get it.
    $mediafile = $this->getMediafile($mediafile_id_1);

    // Check it.
    $this->assertTrue($mediafile[mediamosa_asset_mediafile_db::URI] == 'http://mediamosa.org/external_link', 'Update URI on mediafile');

    // Should find it.
    $this->cql_do_search_test_assets_1('uri <> NULL', array($asset_id_1 => TRUE));
  }

  public function testDatetimeZones() {
    // Create asset.
    $asset_id_1 = $this->createAsset();
    $asset_id_2 = $this->createAsset();
    $asset_id_3 = $this->createAsset();

    // Mediafile.
    $mediafile_id_1 = $this->createMediafile($asset_id_1);
    $mediafile_id_2 = $this->createMediafile($asset_id_2);
    $mediafile_id_2 = $this->createMediafile($asset_id_3);

    // Create asset metadata.
    $this->createAssetMetadata($asset_id_1,
      array(
        'title' => 'aap noot mies',
        'created' => '2010-01-01 00:00:00',
      )
    );

    $this->createAssetMetadata($asset_id_2,
      array(
        'title' => 'aap noot mies',
        'created' => '2010-01-15 18:00:00',
      )
    );

    $this->createAssetMetadata($asset_id_3,
      array(
        'title' => 'aap noot mies',
        'created' => '2010-01-31 23:59:59',
      )
    );

    // May not find anything.
    $this->cql_do_search_test_assets_1('created < "2010-01-01 00:00:00"', array());

    // May not find anything.
    $this->cql_do_search_test_assets_1('created >= "2010-01-01 00:00:00"', array($asset_id_1 => TRUE, $asset_id_2 => TRUE, $asset_id_3 => TRUE));
  }

  /**
   * Test multiple properties of cql search.
   *
   * - Test '=' operator.
   * - Test '<>' operator.
   * - Test combination with NOT.
   * - Sort testing on text and date.
   */
  public function testCQLProperties() {

    // Turn on SQL, this does not work on SOLR.
    variable_set('mediamosa_search_engine', 'mediamosa_sql');

    // Create assets with sleep, so created value is unique.

    $asset_id_2 = $this->createAsset();
    sleep(2);
    $asset_id_4 = $this->createAsset();
    sleep(2);
    $asset_id_3 = $this->createAsset();
    sleep(2);
    $asset_id_1 = $this->createAsset();

    // add properties
    $this->createAssetMetadata($asset_id_1,
      array(
        'title' => 'asset 3',
        'publisher' => 'foo',
      )
    );
    $this->createAssetMetadata($asset_id_2,
      array(
        'title' => 'asset 2',
        'publisher' => 'bar',
      )
    );
    $this->createAssetMetadata($asset_id_3,
      array(
        'title' => 'asset 1',
        'publisher' => array('foo', 'bar'),
      )
    );
    $this->createAssetMetadata($asset_id_4,
      array(
        'title' => 'asset 4',
      )
    );
    $this->cql_do_search_test_assets_1('title = "asset"', array($asset_id_1 => TRUE, $asset_id_2 => TRUE, $asset_id_3 => TRUE, $asset_id_4 => TRUE));

    $this->cql_do_search_test_assets_1('dc.publisher = "foo"', array($asset_id_1 => TRUE, $asset_id_3 => TRUE));

    $this->cql_do_search_test_assets_1('dc.publisher = "bar"', array($asset_id_2 => TRUE, $asset_id_3 => TRUE));

    // Next 2 tests will fail under Solr, as NOT does not work the same as in
    // MySQL.
    if (variable_get('mediamosa_search_engine') != 'mediamosa_sql') {
      // In the next 2 tests, asset_id_3 is controversial.
      $this->cql_do_search_test_assets_1('dc.publisher <> "foo"', array($asset_id_2 => TRUE, $asset_id_3 => TRUE, $asset_id_4 => TRUE));

      $this->cql_do_search_test_assets_1('NOT dc.publisher = "foo"', array($asset_id_2 => TRUE, $asset_id_3 => TRUE, $asset_id_4 => TRUE));
    }

    // Title ASC sort.
    $found_ids = $this->cql_do_search_test_assets_1('title = "asset" sortBy title/sort.ascending', array($asset_id_1 => TRUE, $asset_id_2 => TRUE, $asset_id_3 => TRUE, $asset_id_4 => TRUE));
    $this->var_export($found_ids);
    $this->var_export(array($asset_id_3, $asset_id_2, $asset_id_1, $asset_id_4));
    $this->assertTrue(array($asset_id_3, $asset_id_2, $asset_id_1, $asset_id_4) === $found_ids, 'Title: return in correct ASC order');

    // Title DESC sort.
    $found_ids = $this->cql_do_search_test_assets_1('title = "asset" sortBy title/sort.descending', array($asset_id_1 => TRUE, $asset_id_2 => TRUE, $asset_id_3 => TRUE, $asset_id_4 => TRUE));
    $this->var_export($found_ids);
    $this->var_export(array($asset_id_4, $asset_id_1, $asset_id_2, $asset_id_3));
    $this->assertTrue(array($asset_id_4, $asset_id_1, $asset_id_2, $asset_id_3) === $found_ids, 'Title: return in correct DESC order');

    // Created ASC sort.
    $found_ids = $this->cql_do_search_test_assets_1('title = "asset" sortBy asset_created/sort.ascending', array($asset_id_1 => TRUE, $asset_id_2 => TRUE, $asset_id_3 => TRUE, $asset_id_4 => TRUE));
    $this->var_export($found_ids);
    $this->var_export(array($asset_id_2, $asset_id_4, $asset_id_3, $asset_id_1));
    $this->assertTrue(array($asset_id_2, $asset_id_4, $asset_id_3, $asset_id_1) === $found_ids, 'Created: return in correct ASC order');

    // Created DESC sort.
    $found_ids = $this->cql_do_search_test_assets_1('title = "asset" sortBy asset_created/sort.descending', array($asset_id_1 => TRUE, $asset_id_2 => TRUE, $asset_id_3 => TRUE, $asset_id_4 => TRUE));
    $this->var_export($found_ids);
    $this->var_export(array($asset_id_1, $asset_id_3, $asset_id_4, $asset_id_2));
    $this->assertTrue(array($asset_id_1, $asset_id_3, $asset_id_4, $asset_id_2) === $found_ids, 'Created: return in correct DESC order');
  }
/*
  public function testSolr() {

    // Turn on SQL, this does not work on SOLR.
  //  variable_set('mediamosa_search_engine', 'mediamosa_sql');

    $asset_id_2 = $this->createAsset();
    $asset_id_4 = $this->createAsset();
    $asset_id_3 = $this->createAsset();
    $asset_id_1 = $this->createAsset();

    // add properties
    $this->createAssetMetadata($asset_id_1,
      array(
        'title' => 'asset 3',
        'publisher' => 'foo',
      )
    );
    $this->createAssetMetadata($asset_id_2,
      array(
        'title' => 'asset 2',
        'publisher' => 'bar',
      )
    );
    $this->createAssetMetadata($asset_id_3,
      array(
        'title' => 'asset 1',
        'publisher' => array('foo', 'bar'),
      )
    );
    $this->createAssetMetadata($asset_id_4,
      array(
        'title' => 'asset 4',
      )
    );
    $this->var_export(array($asset_id_1, $asset_id_2, $asset_id_3, $asset_id_4));

    // must be 2,3,4
    //
    // publisher_vc:foo = 1,3
    // publisher_vc:foo AND -publisher_vc:somethingElse = 1,3
    // (publisher_vc:foo AND -publisher_vc:somethingElse) AND publisher_vc:foo
    // (+publisher_vc:foo AND -publisher_vc:somethingElse) AND -publisher_vc:somethingElse = 1,3
    // -publisher_vc:somethingElse AND publisher_vc:foo = 1,3
    // publisher_vc:foo NOT publisher_vc:boo = 1,3
    // (publisher_vc:foo AND publisher_vc:somethingElse) OR (*:* -publisher_vc:foo) = 1,3
    // (*:* -publisher_vc:foo) = 2,4
    // (*:* NOT publisher_vc:foo) = 2,4
    //
    // -publisher_vc:foo = 2,4
    // -(publisher_vc:foo AND publisher:*) = 2,4
    // +publisher_vc:foo NOT publisher_vc:somethingElse = 2,4
    // +publisher_vc:foo AND -publisher_vc:somethingElse = 2,4
    // -publisher_vc:somethingElse NOT publisher_vc:foo = 2,4
    //
    // publisher_vc:foo NOT publisher_vc:bar = 1
    // publisher_vc:foo NOT publisher_vc:somethingElse = 1,3
    //
    // -publisher_vc:foo OR publisher_vc:somethingElse = niks
    // (publisher_vc:foo AND publisher_vc:somethingElse) = niks
    //
    // -publisher_vc:somethingElse = alles
    // NOT publisher_vc:somethingElse = alles
    // (publisher_vc:foo) AND publisher_vc:[* TO *] = 1,3
    //
    // -publisher_vc:foo = 2,4
    // -(publisher_vc:foo AND -publisher_vc:(+"something" +"foo")) = 2,4
    //
    // +publisher_vc:foo NOT publisher_vc:[* TO *] = niks
    // publisher_vc:[* TO *] AND publisher_vc:foo = 1,3
    // publisher_vc:foo NOT (-publisher_vc:somethingElse) = 1,3

//    $response = mediamosa_solr::search('publisher_vc:(+"something" +"foo")');
//    $this->var_export($response);

//    $response = mediamosa_solr::search('-(publisher_vc:foo AND publisher_vc:*)');
//    $this->var_export($response);
//

//    $response = mediamosa_solr::search('publisher_vc:foo AND _query_:"publisher_vc:foo"');
//    $this->var_export($response);

    $response = mediamosa_solr::search('-publisher_vc:foo');
    $this->var_export($response);

//
    $response = mediamosa_solr::search('-(publisher_vc:foo AND publisher_vc:somethingElse) OR (*:* -publisher_vc:foo)');
    $this->var_export($response);

//    $response = mediamosa_solr::search('((publisher_vc:foo AND publisher_vc:somethingElse) OR (*:* -publisher_vc:foo))');
//    $this->var_export($response);
  }*/
}
