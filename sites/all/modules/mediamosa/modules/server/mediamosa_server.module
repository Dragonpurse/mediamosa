<?php
/**
 * @file
 * Server module.
 */

/**
 * Implements hook_menu().
 */
function mediamosa_server_menu() {
  $items = array();

  $items['admin/mediamosa/config/server'] = array(
    'title' => 'Servers',
    'description' => 'List all MediaMosa servers.',
    'page callback' => '_mediamosa_server_list',
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_CONFIG_SERVERS),
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_LIST,
    'file' => 'mediamosa_server.admin.inc',
  );

  $items['admin/mediamosa/config/server/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_LIST,
  );

  $server_types = array(
    mediamosa_server_db::SERVER_TYPE_DOWNLOAD => t('Download'),
    mediamosa_server_db::SERVER_TYPE_STILL => t('Still'),
    mediamosa_server_db::SERVER_TYPE_STREAMING => t('Streaming'),
    mediamosa_server_db::SERVER_TYPE_JOB_PROCESSOR => t('Processing'),
    mediamosa_server_db::SERVER_TYPE_UPLOAD => t('Upload'),
  );

  $weight = mediamosa_settings::UI_TAB_WEIGHT_ADD;
  foreach ($server_types as $server_type => $title) {
    $items['admin/mediamosa/config/server/add/' . $server_type] = array(
      'title' => 'Add ' . $title,
      'page callback' => 'node_add',
      'page arguments' => array(mediamosa_node::MEDIAMOSA_NODE_TYPE_SERVER),
      'access callback' => 'node_access',
      'access arguments' => array('create', mediamosa_node::MEDIAMOSA_NODE_TYPE_SERVER),
      'file' => 'node.pages.inc',
      'file path' => drupal_get_path('module', 'node'),
      'type' => MENU_LOCAL_TASK,
      'weight' => $weight++,
    );
  }

  $items['admin/mediamosa/config/server/%node'] = array(
    'page callback' => 'node_page_view',
    'page arguments' => array(4),
    'access callback' => 'node_access',
    'access arguments' => array('view', 4),
    'type' => MENU_CALLBACK,
  );

  $items['admin/mediamosa/config/server/%node/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_VIEW
  );

  $items['admin/mediamosa/config/server/%node/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'node_page_edit',
    'page arguments' => array(4),
    'access callback' => 'node_access',
    'access arguments' => array('update', 4),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_EDIT,
  );

  $items['admin/mediamosa/config/server/%node/viewers'] = array(
    'title' => 'Viewers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediamosa_server_viewer_form', 4),
    'access callback' => '_mediamosa_user_access_server_viewer',
    'access arguments' => array(mediamosa_permission::UPDATE_CONFIG_VIEWERS, 4),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'mediamosa_server.admin.inc',
    'file path' => drupal_get_path('module', 'mediamosa_server'),
  );
  $items['node/%node/viewers'] = $items['admin/mediamosa/config/server/%node/viewers'];
  $items['node/%node/viewers']['access arguments'] = array(mediamosa_permission::UPDATE_CONFIG_VIEWERS, 1);
  $items['node/%node/viewers']['page arguments'] = array('mediamosa_server_viewer_form', 1);

  $items['admin/mediamosa/config/server/%node/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_mediamosa_node_delete_confirm', 4),
    'access callback' => 'node_access',
    'access arguments' => array('delete', 4),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_DELETE,
  );

  $items['admin/mediamosa/config/server/%node/revisions'] = array(
    'title' => 'Revisions',
    'page callback' => '_mediamosa_node_revision_overview',
    'page arguments' => array(4),
    'access callback' => '_node_revision_access',
    'access arguments' => array(4),
    'type' => MENU_LOCAL_TASK,
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_REVISIONS,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function mediamosa_server_theme() {
  return array(
    'mediamosa_server_viewer_form' => array(
      'render element' => 'form',
      'file' => 'mediamosa_server.admin.inc',
    ),
  );
}

/**
 * Access for viewers on server.
 *
 * @param string $perm
 *   The permission.
 * @param object $node
 *   The node object.
 *
 * @return bool
 *   Returns TRUE for access, FALSE otherwise.
 */
function _mediamosa_user_access_server_viewer($perm, $node) {
  // Access to viewers is only available on streaming servers.
  if ($node->type !== mediamosa_node::MEDIAMOSA_NODE_TYPE_SERVER || ($node->type === mediamosa_node::MEDIAMOSA_NODE_TYPE_SERVER && $node->{mediamosa_server_db::SERVER_TYPE} !== mediamosa_server_db::SERVER_TYPE_STREAMING)) {
    return FALSE;
  }

  return _mediamosa_user_access($perm);
}

/**
 * Implements hook_mediamosa_register_rest_call().
 */
function mediamosa_server_mediamosa_register_rest_call() {

  $rest_calls = array();

  $rest_calls['server/status'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_server_status',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa_server',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_2_1_0,
    mediamosa_rest_call::ACCESS => mediamosa_rest_call::ACCESS_INTERNAL_ONLY,
  );

  $rest_calls['server/status/upload'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_server_upload',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa_server',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_3_5_0,
    mediamosa_rest_call::ACCESS => mediamosa_rest_call::ACCESS_DEFAULT,
  );

  $rest_calls['server/status/upload/$server_id'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_server_upload_details',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa_server',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_3_5_0,
    mediamosa_rest_call::ACCESS => mediamosa_rest_call::ACCESS_INTERNAL_ONLY,
  );

  return $rest_calls;
}

/**
 * Implements hook_mediamosa_register_rest_call_doc().
 */
function mediamosa_server_mediamosa_register_rest_call_doc() {
  $rest_calls = array();

  $rest_calls['server/status'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::TITLE => 'Retrieve the status of the all servers.',
    mediamosa_rest_call::DESCRIPTION => 'Retrieve information about the (process) server.',
    mediamosa_rest_call::EXAMPLE_REQUEST => 'server/status',
    mediamosa_rest_call::RESPONSE_FIELDS => FALSE,
    mediamosa_rest_call::EXAMPLE_RESPONSE => FALSE,
  );

  $rest_calls['server/status/upload'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::TITLE => 'Retrieve the status of the upload servers.',
    mediamosa_rest_call::DESCRIPTION => 'Front ends can use this call to retrieve the upload settings (PHP) for front ends. Do not request this REST call often, as it will do requests to the upload server(s) during the request to give you real time information. Best is to cache this information, specially about the maximum allowed upload size.',
    mediamosa_rest_call::EXAMPLE_REQUEST => 'server/upload',
    mediamosa_rest_call::RESPONSE_FIELDS => array(
      'items/item/real_max_upload_bytes' => 'Use this value to calculate maximum allowed upload size in bytes. With multiple upload servers, choose the lowest value.',
      'items/item/php' => 'This array contains the PHP settings related to upload for the specific upload server.',
    ),
    mediamosa_rest_call::EXAMPLE_RESPONSE => '<?xml version="1.0" encoding="UTF-8"?>
<response>
  <header>
    <item_count>1</item_count>
    <item_count_total>1</item_count_total>
    <item_offset>0</item_offset>
    <request_class>mediamosa_rest_call_server_upload</request_class>
    <request_matched_method>GET</request_matched_method>
    <request_matched_uri>/server/upload</request_matched_uri>
    <request_result>success</request_result>
    <request_result_description/>
    <request_result_id>601</request_result_id>
    <request_uri>[GET] server/upload/</request_uri>
    <version>3.5.x.2030-dev</version>
    <request_process_time>0.129</request_process_time>
  </header>
  <items>
    <item>
      <server_id>14</server_id>
      <version>0</version>
      <server_status>ON</server_status>
      <server_type>UPLOAD</server_type>
      <server_uri>http://upload1.mediamosa.local/</server_uri>
      <server_path>{base_uri}mediafile/upload?upload_ticket={TICKET}</server_path>
      <description>Default upload server 1</description>
      <containers/>
      <mime_type/>
      <object_code/>
      <server_name>Default upload server 1</server_name>
      <slots>0</slots>
      <tools/>
      <uri_upload_progress>{base_uri}uploadprogress?id={PROGRESS_ID}</uri_upload_progress>
      <uri_upload_progress_server>{base_uri}progress?X-Progress-ID={PROGRESS_ID}</uri_upload_progress_server>
      <uri_upload_progress_server_type>APC</uri_upload_progress_server_type>
      <php>
        <file_uploads>1</file_uploads>
        <upload_tmp_dir>/var/tmp</upload_tmp_dir>
        <upload_max_filesize>0</upload_max_filesize>
        <upload_max_filesize_bytes>0</upload_max_filesize_bytes>
        <post_max_size>4090M</post_max_size>
        <post_max_size_bytes>4288675840</post_max_size_bytes>
        <max_file_uploads>20</max_file_uploads>
      </php>
      <real_max_upload_bytes>4288675840</real_max_upload_bytes>
    </item>
    <item>
      <server_id>15</server_id>
      <version>0</version>
      <server_status>ON</server_status>
      <server_type>UPLOAD</server_type>
      <server_uri>http://upload2.mediamosa.local/</server_uri>
      <server_path>{base_uri}mediafile/upload?upload_ticket={TICKET}</server_path>
      <description>Default upload server 2</description>
      <containers/>
      <mime_type/>
      <object_code/>
      <server_name>Default upload server 2</server_name>
      <slots>0</slots>
      <tools/>
      <uri_upload_progress>{base_uri}uploadprogress?id={PROGRESS_ID}</uri_upload_progress>
      <uri_upload_progress_server>{base_uri}progress?X-Progress-ID={PROGRESS_ID}</uri_upload_progress_server>
      <uri_upload_progress_server_type>APC</uri_upload_progress_server_type>
      <php>
        <file_uploads>1</file_uploads>
        <upload_tmp_dir>/var/tmp</upload_tmp_dir>
        <upload_max_filesize>0</upload_max_filesize>
        <upload_max_filesize_bytes>0</upload_max_filesize_bytes>
        <post_max_size>4090M</post_max_size>
        <post_max_size_bytes>4288675840</post_max_size_bytes>
        <max_file_uploads>20</max_file_uploads>
      </php>
      <real_max_upload_bytes>4288675840</real_max_upload_bytes>
    </item>
  </items>
</response>',
  );

  $rest_calls['server/status/upload/$server_id'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::TITLE => 'Retrieve the status the current upload server instance.',
    mediamosa_rest_call::DESCRIPTION => 'Retrieve detail information about the upload settings on this server instance. Internal call only, use server/upload/status instead as client.',
    mediamosa_rest_call::EXAMPLE_REQUEST => 'server/upload/4',
    mediamosa_rest_call::RESPONSE_FIELDS => FALSE,
    mediamosa_rest_call::EXAMPLE_RESPONSE => FALSE,
  );

  return $rest_calls;
}
