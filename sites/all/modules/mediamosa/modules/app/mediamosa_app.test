<?php
/**
 * @file
 * Application unit tests.
 */

class MediaMosaAppTestCaseEga extends MediaMosaTestCaseEga {

  // ------------------------------------------------------------------ Members.

  // ------------------------------------------------------------------ Functions.
  public static function getInfo() {
    return array(
      'name' => 'APP - common tests',
      'description' => 'The application related unit tests.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_APP,
    );
  }

  // ------------------------------------------------------------------ Tests.
  public function testMasterSlaveSwitch() {
    // Create asset.
    $asset_id = $this->createAsset();

    // Create mediafile.
    $mediafile_id = $this->createMediafile($asset_id);

    $app_id = $this->a_app[mediamosa_app_db::APP_ID];
    $app_id_2 = $this->a_app_2[mediamosa_app_db::APP_ID];

    // Do EGA login 2.
    $this->doEgaLogin_2();

    // Set to other app.
    $a_parameters = array(
      mediamosa_rest_call_acl_mediafile_set_rights::ACL_APP => array(
        $app_id_2
      )
    );
    $this->setMediafileAcl($mediafile_id, $a_parameters, 'Master/slave: master set for mediafile', array('acl_app' => array($app_id_2 => mediamosa_error::ERRORCODE_MASTERSLAVE_DISALLOWED)));

    // Other should not work either.
    $this->toEga_2();

    // Create asset.
    $asset_id_2 = $this->createAsset();

    // Create mediafile.
    $mediafile_id_2 = $this->createMediafile($asset_id_2);

    $a_parameters = array(
      mediamosa_rest_call_acl_mediafile_set_rights::ACL_APP => array(
        $app_id
      )
    );
    $this->setMediafileAcl($mediafile_id_2, $a_parameters, 'Master/slave: master set for mediafile', array('acl_app' => array($app_id => mediamosa_error::ERRORCODE_MASTERSLAVE_DISALLOWED)));

    $this->toEga_1();

    // Change the master setting.
    $this->enableMasterSlave($app_id_2);

    // Set to other app.
    $a_parameters = array(
      mediamosa_rest_call_acl_mediafile_set_rights::ACL_APP => array(
        $app_id_2
      )
    );
    $this->setMediafileAcl($mediafile_id, $a_parameters, 'Master/slave: master set for mediafile');

    // Other still should not work either.
    $this->toEga_2();

    // Create asset.
    $asset_id_2 = $this->createAsset();

    // Create mediafile.
    $mediafile_id_2 = $this->createMediafile($asset_id_2);

    $a_parameters = array(
      mediamosa_rest_call_acl_mediafile_set_rights::ACL_APP => array(
        $app_id
      )
    );
    $this->setMediafileAcl($mediafile_id_2, $a_parameters, 'Master/slave: master set for mediafile', array('acl_app' => array($app_id => mediamosa_error::ERRORCODE_MASTERSLAVE_DISALLOWED)));

    $this->toEga_1();

    // Change back the master setting.
    $this->disableMasterSlave($app_id_2);

    // Set to other app.
    $a_parameters = array(
      mediamosa_rest_call_acl_mediafile_set_rights::ACL_APP => array(
        $app_id_2
      )
    );
    $this->setMediafileAcl($mediafile_id, $a_parameters, 'Master/slave: master set for mediafile', array('acl_app' => array($app_id_2 => mediamosa_error::ERRORCODE_MASTERSLAVE_DISALLOWED)));
  }

  // Simple check that result of '/transcode/profile/default' is the same as deprecated call 'preview_profile_id'.
  public function testDefaultProfileId() {
    $result_old_call = $this->restCallGet('preview_profile_id');
    $result_call = $this->restCallGet('transcode/profile/default');

    $this->assertTrue(
            (int)$result_old_call['xml']->items->item[0]->preview_profile_id ==
            (int)$result_call['xml']->items->item[0]->preview_profile_id,
            'Comparing result of default transcode profile calls: preview_profile_id and transcode/profile/default.');
  }

  /**
   * Test if internal call without app_id provided fails.
   */
  public function testInternalApp() {
    $app_id = $this->a_app[mediamosa_app_db::APP_ID];

    // Create asset.
    $asset_id = $this->createAsset();
    $mediafile_id = $this->createMediafile($asset_id);

    // Without app_id, but with possible session must fail. Session with app_id
    // must not be allowed to be used. Session was created by calls above.
    $do_internal = TRUE;
    $parameters = array(
      mediamosa_rest_call_create_mediafile::IS_ORIGINAL_FILE => 'false',
      mediamosa_rest_call_create_mediafile::MEDIAFILE_ID_SOURCE => $mediafile_id,
    );
    $this->createMediafile($asset_id, $parameters, array(mediamosa_error::ERRORCODE_NOT_AUTHORIZED), $do_internal);

    $parameters = array(
      mediamosa_rest_call_create_mediafile::APP_ID => $app_id,
      mediamosa_rest_call_create_mediafile::IS_ORIGINAL_FILE => 'false',
      mediamosa_rest_call_create_mediafile::MEDIAFILE_ID_SOURCE => $mediafile_id,
    );
    $this->createMediafile($asset_id, $parameters, array(mediamosa_error::ERRORCODE_OKAY), $do_internal);
  }
}
