<?php
/**
 * @file
 * Install, update, and uninstall functions for the mediamosa module.
 */

/**
 * Requirement; need at least revision 60 of the SolrPhpClient lib.
 */
define('MEDIAMOSA_REQUIREMENT_REVISION_SOLRPHPCLIENT', 59);


require_once 'mediamosa_solr_queue_db.class.inc';

/**
 * Implements hook_requirements().
 */
function mediamosa_solr_requirements($phase) {

  $requirements = array();

  // Ensure translations don't break at install time.
  $t = get_t();

  // We need the SolrPhpClient class, so lets make sure we have it installed
  // or available.
  $solr_php_client_found = FALSE;

  // When found, this will tell if we have the right revision. For now we will
  // accept revision 22 or higher.
  $revision_ok = FALSE;

  // First if its already found then we don't have to enable it.
  $solr_php_client_found = class_exists('Apache_Solr_Service');

  // Ok not already enabled somewhere else.
  if (!$solr_php_client_found) {
    // Now its not found, lets include where we expect it.
    include_once '3rdparty/SolrPhpClient/Apache/Solr/Service.php';

    // Ok, found it?
    $solr_php_client_found = class_exists('Apache_Solr_Service');
  }

  // If found, check the revision.
  if ($solr_php_client_found) {
    // Ok found, so check revision.
    $matches = array();
    preg_match('/\$Revision:\s?(\d+)\s?\$/', Apache_Solr_Service::SVN_REVISION, $matches);

    if (count($matches) == 2) {
      // Check revision.
      $revision_ok = (int) $matches[1] >= MEDIAMOSA_REQUIREMENT_REVISION_SOLRPHPCLIENT;
    }
  }

  switch ($phase) {
    case 'runtime':
      if ($solr_php_client_found && $revision_ok) {
        $requirements['mediamosa_solr_php_client'] = array(
          'title' => $t('MediaMosa Solr PHP Client'),
          'value' => $t('Found (revision !revision)', array('!revision' => MEDIAMOSA_REQUIREMENT_REVISION_SOLRPHPCLIENT)),
          'severity' => REQUIREMENT_OK,
        );
      }

    case 'install':
      // Runtime reuses this part from install.
      if ($solr_php_client_found && !$revision_ok) {
        $requirements['mediamosa_solr_php_client'] = array(
          'title' => $t('MediaMosa Solr PHP Client'),
          'value' => $t('Found, but wrong revision (!revision)', array('!revision' => MEDIAMOSA_REQUIREMENT_REVISION_SOLRPHPCLIENT)),
          'description' => $t("The MediaMosa Solr PHP Client requires the SolrPhpClient library. This library is already been found/installed. However MediaMosa Solr requires revision !revision or higher. You need to replace the current installation of library 'SolrPhpClient'. This library is found at: !here.", array(
            '!here' => l($t('http://code.google.com/p/solr-php-client/'), 'http://code.google.com/p/solr-php-client/'),
            '!revision' => MEDIAMOSA_REQUIREMENT_REVISION_SOLRPHPCLIENT,
          )),
          'severity' => REQUIREMENT_ERROR,
        );
      }
      elseif (!$solr_php_client_found || !$revision_ok) {
        $requirements['mediamosa_solr_php_client'] = array(
          'title' => $t('MediaMosa Solr PHP Client'),
          'value' => $t('Not found'),
          'description' => $t("To properly use the Solr extension for MediaMosa, add the 3rd party library 'SolrPhpClient' under this module under the map 3rdparty. The installation should look like mediamosa_solr/3rdparty/SolrPhpClient/. This library is found at: !here."), array(
            '!here' => l($t('http://code.google.com/p/solr-php-client/'), 'http://code.google.com/p/solr-php-client/'),
          ),
          'severity' => REQUIREMENT_ERROR,
        );
      }
      break;
  }

  return $requirements;
}

/**
 * Implements hook_install().
 */
function mediamosa_solr_install() {
  // Create our table(s).
  mediamosa::drupal_install_schema('mediamosa_solr');
}

/**
 * Implements hook_unstall().
 */
function mediamosa_solr_uninstall() {
  // Drop our table(s).
  mediamosa::drupal_uninstall_schema('mediamosa_solr');

  // Remove our variables.
  $result = db_select('variable', 'v')
    ->fields('v', array('name'))
    ->condition('name', db_like('mediamosa_solr_') . '%', 'LIKE')
    ->execute();

  foreach ($result as $row) {
    variable_del($row->name);
  }
}

/**
 * Implements hook_disable().
 */
function mediamosa_solr_disable() {
  // If our module is selected as search engine, then remove the variable
  // so we fail back to default.
  if (variable_get('mediamosa_search_engine', 'mediamosa_search') == 'mediamosa_solr') {
    variable_del('mediamosa_search_engine');
  }
}

/**
 * Implements hook_schema().
 */
function mediamosa_solr_schema() {

  $schema = array();
  $schema[mediamosa_solr_queue_db::TABLE_NAME] = array(
    'description' => 'The (re)index table.',
    'fields' => array(
      mediamosa_solr_queue_db::ID => array(
        'type' => 'varbinary',
        'mysql_type' => 'varbinary(32)',
        'length' => mediamosa_db::HASH_ID_LENGTH,
        'not null' => TRUE,
        'description' => 'The ID to index, for now asset_id by default.',
      ),
      mediamosa_solr_queue_db::CREATED => array(
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'not null' => TRUE,
        'description' => 'The date and time when the row was created.',
    ),
    ),
    'primary key' => array(mediamosa_solr_queue_db::ID),
    'indexes' => array(
      'idx_created' => array(mediamosa_solr_queue_db::CREATED)
    ),
  );

  return $schema;
}

/**
 * Files renamed, rebuild Drupal registry.
 */
function mediamosa_solr_update_7000() {
}

/**
 * Files renamed, rebuild Drupal registry.
 */
function mediamosa_solr_update_7001() {
  // Rebuild the registry.
  //
  // Don't worry, I know what I'm doing.
  db_query('DELETE FROM {registry}');
  // Clear it too.
  db_query('DELETE FROM {registry_file}');
  drupal_flush_all_caches();
}

/**
 * Rebuild the registry.
 */
function mediamosa_solr_update_7002() {
  // Rebuild the registry.
  registry_rebuild();
  cache_clear_all();
}
