<?php
/**
 * @file
 * Job tests for transcode jobs.
 */

// Registry indexes all .test files, while the base is not indexed (module is
// not on.
if (!class_exists('MediaMosaStorageMountPointBaseTestCaseEga')) {
  require_once('mediamosa_storage_mountpoint.simpletest.class.inc');
}

class MediaMosaStorageMountpointJobAnalyseTestCaseEga extends MediaMosaStorageMountPointBaseTestCaseEga {
  // ------------------------------------------------------------------ Members.
  // ---------------------------------------------------------------- Functions.
  /**
   * Implement getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'MediaMosa Storage - Mountpoint analyse test',
      'description' => 'Testing the transcoding jobs.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_STORAGE,
    );
  }

  // -------------------------------------------------------------------- Tests.
  /**
   * Basic job transcode test.
   */
  public function testMountpointJobAnalyse() {
    // My app ID.
    $app_id = $this->a_app['app_id'];

    // Create default profile.
    $this->createMountPointProfile();

    // Get my default app storage.
    $storage_profile_app = mediamosa_storage_profile_app::get_app_storage_profile($app_id);

    $this->var_export($storage_profile_app);

    // Create upload file.
    $upload = $this->uploadTestFile(array('filename' => $this->getTestVideo_wmv()));
    $mediafile_id = $upload['mediafile_id'];

    $uri = mediamosa_storage::create_local_mediafile_uri($app_id, $mediafile_id);
    $this->assert($uri === 'mediamosa-storage-mountpoint://2/mountpoint/-/' . substr($mediafile_id, 0 ,1) . '/' . $mediafile_id, 'Correct URI');

    mediamosa_io::mkdir(mediamosa_io::dirname($uri));

    $uri = mediamosa_io::dirname($uri);
    $this->var_export($uri);

    $this->var_export(mediamosa_io::realpath($uri));

    $this->var_export(mediamosa_storage::get_local_mediafile_path($mediafile_id));

    // Get the mediafile.
    $mediafile = $this->getMediafile($mediafile_id);

    // Show the mediafile.
    $this->var_export($mediafile);

    // Get it directly from the database.
    $metadata = mediamosa_asset_mediafile_metadata::get_all_mediafile_metadata($mediafile_id);
    $this->var_export($metadata);

    // We expect these.
    $expecting = array(
      'video_codec' => 'wmv3',
      'colorspace' => 'yuv420p',
      'width' => '320',
      'height' => '240',
      'fps' => '25',
      'audio_codec' => 'wmav2',
      'sample_rate' => '32000',
      'channels' => '2',
      'file_duration' => '00:00:29.92',
      'container_type' => 'asf',
      'bitrate' => '265',
      'bpp' => '0.14',
      'filesize' => '993480',
      'mime_type' => 'video/x-ms-asf',
      'is_hinted' => 'FALSE',
      'is_inserted_md' => 'FALSE',
      'md5' => '713fa44acad156667e4c3e64a6051212',
    );

    $mediafile['metadata']['is_hinted'] = empty($mediafile['metadata']['is_hinted']) ? 'FALSE' : $mediafile['metadata']['is_hinted'];
    $mediafile['metadata']['is_inserted_md'] = empty($mediafile['metadata']['is_inserted_md']) ? 'FALSE' : $mediafile['metadata']['is_inserted_md'];
    $metadata['is_hinted'] = empty($metadata['is_hinted']) ? 'FALSE' : $metadata['is_hinted'];
    $metadata['is_inserted_md'] = empty($metadata['is_inserted_md']) ? 'FALSE' : $metadata['is_inserted_md'];

    // Same amount of properties? If this no longer is the same, then eihter
    // remove this assert or add the missing param to the $expecting.
    $this->assert(count($mediafile['metadata']) == count($expecting), t('Got same amount [REST] of technical metadata back as we expected.'));

    // Same with DB.
    $this->assert(count($metadata) == count($expecting), t('Got same amount [DB] of technical metadata back as we expected.'));

    // Now see if what we expect is present.
    foreach ($expecting as $name => $value) {
      $this->assert(isset($mediafile['metadata'][$name]), t("Found param '@name'", array('@name' => $name)));
      $this->assert($mediafile['metadata'][$name] == $value, t("Values are the same for param '@name'", array('@name' => $name)));

      $this->assert(isset($metadata[$name]), t("Found param '@name'", array('@name' => $name)));
      $this->assert($metadata[$name] == $value, t("Values are the same for param '@name'", array('@name' => $name)));
    }
  }
}